package view_players

import "ultigamecast/view/component"
import "fmt"
import "ultigamecast/app/ctxvar"

type CreatePlayerDTO struct {
	view_component.DTO
	Name string `validate:"required,ascii,max=64"`
}

const (
	createPlayerFormId    = "create_player_form"
	createPlayerSubmitId  = "create_player_submit"
	createPlayerLoadingId = "create_player_loading"
	createPlayerNameId    = "create_player_name"
)

templ CreatePlayerForm(dto *CreatePlayerDTO) {
	<form
		id={ createPlayerFormId }
		hx-post={ fmt.Sprintf("%s/players", ctxvar.GetTeam(ctx).Slug) }
		hx-swap="outerHTML"
		hx-disabled-elt={ "#" + createPlayerSubmitId }
		hx-indicator={ "#" + createPlayerLoadingId }
	>
		<nav class="no-space">
			<div class={ "field label border left-round", dto.FieldInvalidClass("Name") }>
				<input type="text" name="name" id={ createPlayerNameId } value={ dto.Name } required autocomplete="off"/>
				<label for={ createPlayerNameId }>Name</label>
				<span class="error">{ dto.FieldError("Name") }</span>
			</div>
			<button id={ createPlayerSubmitId } class="square large right-round">
				@view_component.LoadingIcon(createPlayerLoadingId, "add", "small")
			</button>
		</nav>
		@view_component.FormError(dto)
	</form>
}
