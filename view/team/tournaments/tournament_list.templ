package view

import "ultigamecast/modelspb"
import "github.com/labstack/echo/v5"
import "ultigamecast/view/util"
import "fmt"
import "ultigamecast/view/icon"
import games "ultigamecast/view/team/tournaments/games"

templ TeamTournaments(c echo.Context, teamSlug string, tournaments []*modelspb.TournamentWithGames) {
	<div role="tablist" class="tabs tabs-bordered" aria-controls="tab-content">
		<button hx-get={ string(util.JoinSlugs("/team", teamSlug, "tournaments")) } role="tab" aria-controls="tab-content" aria-selected="false" class="tab tab-active">Tournaments</button>
		<button hx-get={ string(util.JoinSlugs("/team", teamSlug, "roster")) } role="tab" aria-controls="tab-content" aria-selected="false" class="tab">Roster</button>
	</div>
	@tournamentList(c, teamSlug, tournaments)
}

templ tournamentList(c echo.Context, teamSlug string, tournaments []*modelspb.TournamentWithGames) {
	<div class="mx-auto max-w-screen-lg px-8 py-4 mt-4 relative">
		<div id="tournament_list_wrapper" class="relative">
			<div class="bg-primary w-1 h-full absolute left-0 top-0 -translate-x-1/2"></div>
			<ul id="tournament_list">
				for _, t := range tournaments {
					@tournamentRow(teamSlug, t.Tournament)
					@games.TournamentGameList(teamSlug, t.Tournament.GetSlug(), t.Games)
				}
			</ul>
			<div class="absolute -left-4 -top-1">
				<button
					type="button"
					id="create_tournament_open_modal_button"
					class="px-1.5 rounded-full text-white text-nowrap flex flex-nowrap items-center gap-1 truncate text-lg btn btn-sm btn-primary"
					onmouseover="create_tournament_text.style.width = 150"
					onmouseout="create_tournament_text.style.width = 0"
					hx-target="#modal_content"
					hx-swap="innerHTML"
					hx-get={ util.JoinSlugsString("/team", teamSlug, "newTournament") }
				>
					<div class="w-fit flex items-center">
						@icon.HtmxLoading(icon.Add(), icon.LoadingSm())
						<span class="text-sm text-nowrap text-clip truncate w-0 transition-all" id="create_tournament_text">New Tournament</span>
					</div>
				</button>
			</div>
		</div>
	</div>
}

templ tournamentRow(teamSlug string, tournament *modelspb.Tournaments) {
	<li id={ fmt.Sprintf("tournament_%s", tournament.Record.GetId()) } class="first:pt-8">
		<div class="p-4 relative">
			<div class="h-4 w-4 rounded-full bg-white border-4 border-primary absolute left-0 -translate-x-1/2 top-6"></div>
			<div class="flex justify-between">
				<div class="flex flex-col gap-1">
					<h3 class="font-bold text-lg">{ tournament.GetName() }</h3>
					if !tournament.GetStart().IsZero() || !tournament.GetEnd().IsZero() {
						<div class="flex items-center gap-2 text-gray-400">
							@icon.Date()
							<div class="gap-1">
								if tournament.GetStart().IsZero() {
									<span>?</span>
								} else {
									<span>{ tournament.GetStart().Time().Format("Jan 2, 06") }</span>
								}
								<span>-</span>
								if tournament.GetEnd().IsZero() {
									<span>?</span>
								} else {
									<span>{ tournament.GetEnd().Time().Format("Jan 2, 06") }</span>
								}
							</div>
						</div>
					}
					if tournament.GetLocation() != "" {
						<div class="flex items-center gap-2 text-gray-400">
							@icon.Location()
							<span>{ tournament.GetLocation() }</span>
						</div>
					}
				</div>
				<div>
					<div class="dropdown dropdown-end">
						<div tabindex="0" role="button" class="btn btn-sm btn-icon m-1">
							@icon.VerticalDots()
						</div>
						<ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
							<li>
								<a
									hx-get={ util.JoinSlugsString("/team", teamSlug, "tournaments", tournament.GetSlug(), "newGame") }
									hx-target="#modal_content"
									hx-swap="innerHTML"
								>
									@icon.HtmxLoading(icon.Add(), icon.LoadingXs())
									New Game
								</a>
							</li>
							<li>
								<a
									hx-get={ util.JoinSlugsString("/team", teamSlug, "tournaments", tournament.GetSlug(), "edit") }
									hx-target="#modal_content"
									hx-swap="innerHTML"
								>
									@icon.HtmxLoading(icon.Edit(), icon.LoadingXs())
									Edit
								</a>
							</li>
							<li>
								<a role="button" onclick={ showDeleteModal(tournament.Record.GetId()) }>
									@icon.TrashCan()
									Delete
								</a>
							</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
		<dialog class="modal" id={ deleteModalId(tournament.Record.GetId()) }>
			<div class="modal-box">
				<h3 class="font-bold text-xl">Are you sure?</h3>
				<p class="text-sm py-2">Are you sure you want to delete <span class="text-primary">{ tournament.GetName() }</span>? This will remove all data associated with this tournament, including statistics and games. This cannot be undone.</p>
				<div class="modal-action">
					<form method="dialog"><button class="btn">Cancel</button></form>
					<button
						class="btn btn-primary"
						hx-delete={ util.JoinSlugsString("/team", teamSlug, "tournaments", tournament.GetSlug()) }
						hx-disabled-elt="this"
						hx-on::beforeSwap={ closeDeleteModal(tournament.Record.GetId()) }
						hx-target="closest li"
					>
						Confirm
					</button>
				</div>
			</div>
			<form method="dialog" class="modal-backdrop"><button>close</button></form>
		</dialog>
	</li>
}

script showDeleteModal(tournamentId string) {
	document.getElementById("delete_tournament_" + tournamentId)?.showModal()
}

script closeDeleteModal(tournamentId string) {
	console.log(tournamentId)
	setTimeout(() => document.getElementById("delete_tournament_" + tournamentId)?.close())
}

func deleteModalId(tournamentId string) string {
	return fmt.Sprintf("delete_tournament_%s", tournamentId)
}

templ NewTournamentRow(teamSlug string, tournament *modelspb.Tournaments) {
	<div hx-swap-oob="afterbegin:#tournament_list">
		@tournamentRow(teamSlug, tournament)
	</div>
}

templ EditedTournamentRow(teamSlug string, tournament *modelspb.Tournaments) {
	<div hx-swap-oob={ fmt.Sprintf("outerHTML:#tournament_%s", tournament.Record.GetId()) }>
		@tournamentRow(teamSlug, tournament)
	</div>
}
