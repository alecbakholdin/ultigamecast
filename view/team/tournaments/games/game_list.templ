package view

import "fmt"
import "ultigamecast/view/icon"
import "ultigamecast/view/util"
import "ultigamecast/view/component"
import "strconv"
import "github.com/pocketbase/pocketbase/tools/types"
import "time"
import "ultigamecast/pbmodels"

templ TournamentGameList(teamSlug string, tournamentSlug string, games []*pbmodels.Games) {
	<div
		id={ fmt.Sprintf("tournament_%s_game_list", tournamentSlug) }
		hx-trigger={ fmt.Sprintf("refreshgames-%s from:body", tournamentSlug) }
		hx-get={ util.JoinSlugsString("/team", teamSlug, "tournaments", tournamentSlug, "games") }
		hx-swap="outerHTML"
		hx-target="this"
	>
		for _, game := range games {
			@TournamentGameRow(teamSlug, tournamentSlug, game)
		}
	</div>
}

func formatTime(dt types.DateTime, format string) string {
	if dt.Time().IsZero() {
		return ""
	}
	loc, _ := time.LoadLocation("America/New_York")
	return dt.Time().In(loc).Format(format)
}

templ TournamentGameRow(teamSlug string, tournamentSlug string, game *pbmodels.Games) {
	<div class="p-4 relative" id={ fmt.Sprintf("tournament_game_%s", game.Id) }>
		<div class="h-2 w-2 rounded-full bg-primary absolute left-0 -translate-x-1/2 top-6"></div>
		<div class="flex w-full">
			<div class="flex-grow flex flex-col gap-1">
				<span class="font-semibold flex items-center gap-2">
					@gameStatus(game)
					vs. { game.Opponent }
					<a href={ util.JoinSlugs("/team", teamSlug, "tournaments", tournamentSlug, "games", game.GetId()) }>
						@icon.ExternalLink()
					</a>
				</span>
				@component.IconBlurbConditional(icon.Clock(), !game.StartTime.IsZero()) {
					<span>{ formatTime(game.StartTime, "Jan 2, 3:04 PM") }</span>
				}
				if game.TempF != 0 || game.WindMph != 0 {
					<div class="flex items-center gap-4">
						@component.IconBlurbConditional(icon.Thermometer(), game.TempF != 0) {
							{ fmt.Sprintf("%.1", game.TempF) } &degF
						}
						@component.IconBlurbConditional(icon.Wind(), game.WindMph != 0) {
							{ fmt.Sprintf("%.1", game.WindMph) } mph
						}
					</div>
				}
			</div>
			<div class="dropdown dropdown-end">
				<div tabindex="0" role="button" class="btn btn-sm btn-icon m-1">
					@icon.VerticalDots()
				</div>
				<ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
					<li>
						<a
							hx-get={ util.JoinSlugsString("/team", teamSlug, "tournaments", tournamentSlug, "games", game.GetId(), "edit") }
							hx-target="#modal_content"
							hx-swap="innerHTML"
						>
							@icon.HtmxLoading(icon.Edit(), icon.LoadingXs())
							Edit Game
						</a>
					</li>
				</ul>
			</div>
		</div>
	</div>
}

templ gameStatus(game *pbmodels.Games) {
	if game.Status == "completed" && game.TeamScore > game.OpponentScore {
		<div class="badge badge-outline badge-success">
			Win
			{ strconv.Itoa(game.TeamScore) } - { strconv.Itoa(game.OpponentScore) }
		</div>
	} else if game.Status == "completed" && game.TeamScore < game.OpponentScore {
		<div class="badge badge-outline badge-error">
			Loss
			{ strconv.Itoa(game.TeamScore) } - { strconv.Itoa(game.OpponentScore) }
		</div>
	} else if game.Status == "live" {
		<div class="badge badge-outline badge-error flex items-center gap-1">
			<div class="mt-[1px] w-2 h-2 bg-error rounded-full animate-pulse"></div>
			Live
			{ strconv.Itoa(game.TeamScore) } - { strconv.Itoa(game.OpponentScore) }
		</div>
	} else {
		<div class="badge badge-outline">
			Scheduled
		</div>
	}
}
