package view

import "github.com/labstack/echo/v5"
import "ultigamecast/view/util"
import "ultigamecast/view/component"
import "ultigamecast/view/icon"
import "fmt"
import "strconv"
import "ultigamecast/pbmodels"

templ ManageRosterDialogContent(c echo.Context, players []*pbmodels.Players) {
	<div id="manage_roster_dialog_content">
		<h3 class="font-bold text-lg">Manage Roster</h3>
		<div class="flex flex-col gap-2">
			<form
				hx-boost="true"
				hx-put={ util.JoinSlugsString("/team", c.PathParam("teamsSlug"), "rosterOrder") }
				hx-swap="none"
				hx-trigger="end"
				enctype="multipart/form-data"
				id="manage_roster_players"
				class="sortable flex flex-col gap-2"
				hx-indicator=".sortable-indicator"
			>
				@component.FormError(c)
				<div class="htmx-indicator sortable-indicator">
					Updating...
				</div>
				for _, player := range players {
					@PlayerRow(c, player)
				}
			</form>
			@CreatePlayerRow(c, &pbmodels.Players{Order: len(players)})
		</div>
		<div class="modal-action">
			<form method="dialog"><button class="btn">Close</button></form>
		</div>
	</div>
}

templ PlayerRow(c echo.Context, player *pbmodels.Players) {
	<div
		id={ fmt.Sprintf("manage_roster_player_%s", player.Id) }
		class="manage-roster-row flex items-center gap-2"
	>
		<span class="handle">
			@icon.Hamburger()
		</span>
		<span class="flex-grow">
			{ player.Name }
		</span>
		<div>
			<button
				hx-get={ util.JoinSlugsString("/team", c.PathParam("teamsSlug"), "roster", player.Id, "edit") }
				hx-target="closest .manage-roster-row"
				hx-indicator="closest .manage-roster-row"
				hx-swap="outerHTML"
				hx-disabled-elt="this"
				class="btn btn-icon btn-sm"
			>
				@icon.HtmxLoading(icon.Edit(), icon.LoadingXs())
			</button>
		</div>
		<input type="hidden" name="player_id" value={ player.Id }/>
	</div>
}

templ EditPlayerRow(c echo.Context, data *pbmodels.Players) {
	<form
		hx-boost="true"
		hx-put={ util.JoinSlugsString("/team", c.PathParam("teamsSlug"), "roster", data.Id) }
		hx-target="this"
		hx-swap="outerHTML"
		class="mb-0"
		hx-disabled-elt=".edit-player-button"
		hx-indicator="#edit_player_put"
	>
		<div class="flex gap-1">
			<div class="flex-grow">
				@component.InputWrapper(c, "name") {
					<input
						autofocus
						name="name"
						type="text"
						class="input input-sm"
						value={ data.Name }
					/>
				}
			</div>
			<button
				type="button"
				id="edit_player_cancel"
				hx-get={ util.JoinSlugsString("/team", c.PathParam("teamsSlug"), "roster", data.Id, "row") }
				hx-target="closest form"
				hx-indicator="this"
				class="edit-player-put edit-player-button btn btn-icon btn-sm"
			>
				@icon.HtmxLoading(icon.Cancel(), icon.LoadingXs())
			</button>
			<button
				type="button"
				id="edit_player_delete"
				class="edit-player-button btn btn-icon btn-sm btn-error"
				aria-label="delete"
				hx-delete={ util.JoinSlugsString("/team", c.PathParam("teamsSlug"), "roster", data.Id) }
				hx-confirm={ fmt.Sprintf("Are you sure you want to delete %s? This action cannot be undone", data.Name) }
				hx-indicator="this"
			>
				@icon.HtmxLoading(icon.TrashCan(), icon.LoadingXs())
			</button>
			<button
				id="edit_player_put"
				class="edit-player-button btn btn-icon btn-sm btn-primary"
				aria-label="submit edit"
			>
				@icon.HtmxLoading(icon.Check(), icon.LoadingXs())
			</button>
		</div>
		@component.FormError(c)
	</form>
}

templ CreatePlayerRow(c echo.Context, data *pbmodels.Players) {
	<form
		id="create-player-form"
		hx-boost="true"
		hx-post={ util.JoinSlugsString("/team", c.PathParam("teamsSlug"), "roster") }
		hx-target="this"
		hx-swap="outerHTML"
		hx-disabled-elt="#create_player_button"
		class="flex flex-col mb-0"
		hx-on::after-settle="setTimeout(() => create_player_name.focus())"
	>
		<div class="flex gap-1">
			@component.InputWrapper(c, "name") {
				<input
					id="create_player_name"
					type="text"
					name="name"
					placeholder="Name"
					class="input input-bordered"
					value={ data.Name }
				/>
			}
			<input type="hidden" name="order" value={ strconv.Itoa(data.Order) }/>
			<button id="create_player_button" class="btn btn-icon btn-primary">
				@icon.HtmxLoading(icon.Add(), icon.LoadingSm())
			</button>
		</div>
		@component.FormError(c)
	</form>
}

templ NewPlayerRow(c echo.Context, player *pbmodels.Players) {
	<div hx-swap-oob="beforeend:#manage_roster_players">
		@PlayerRow(c, player)
	</div>
}
