package component

import "time"
import "ultigamecast/view/icon"
import "fmt"
import "github.com/labstack/echo/v5"

type ToastSeverity string

const (
	ToastSeverityError   ToastSeverity = "alert-error"
	ToastSeverityWarning ToastSeverity = "alert-warning"
	ToastSeverityInfo    ToastSeverity = "alert-info"
	ToastSeveritySuccess ToastSeverity = "alert-success"
)

type ToastData struct {
	Message  string        // Message to display
	Duration time.Duration // Duration before toast is auto-removed. Default is 1.5s
	Severity ToastSeverity // Determines the color of the alert. Defaults to empty
}

func RenderToast(c echo.Context, message string, severity ToastSeverity) error {
	return Toast(&ToastData{
		Message:  message,
		Severity: severity,
	}).Render(c.Request().Context(), c.Response().Writer)
}

func RenderToastError(c echo.Context, message string) error {
	return RenderToast(c, message, ToastSeverityError)
}

templ Toast(data *ToastData) {
	<div hx-swap-oob="afterbegin:#toasts">
		<div class={ "alert flex items-center gap-3", templ.SafeClass(string(data.Severity)) } remove-me={ toastDuration(data.Duration) }>
			@toastIcon(data.Severity)
			<span>{ data.Message }</span>
		</div>
	</div>
}

func toastDuration(d time.Duration) string {
	if d == 0 {
		return "1.5s"
	}
	return fmt.Sprintf("%.02fs", float32(d)/float32(time.Second))
}

func toastIcon(severity ToastSeverity) templ.Component {
	switch severity {
	case "alert-error":
		return icon.Error()
	case "alert-warning":
		return icon.Warning()
	case "alert-info":
		return icon.Info()
	case "alert-success":
		return icon.Success()
	default:
		return icon.Info()
	}
}
