package view_team

import "ultigamecast/web/view/component"
import "ultigamecast/internal/ctxvar"

type TeamFormDTO struct {
	view_component.DTO
	Name         string `validate:"required,max=64,ascii"`
	Organization string `validate:"max=64,ascii"`
}

const (
	createTeamFormId    = "team_modal_form"
	createTeamSubmitId  = "team_modal_submit"
	createTeamLoadingId = "team_modal_loading"
)

templ TeamModal(isNew bool, dto *TeamFormDTO) {
	<h5>
		if isNew {
			New Team
		} else {
			Edit Team
		}
	</h5>
	<div class="small-space"></div>
	@TeamForm(isNew, dto)
	<nav class="responsive">
		<form method="dialog">
			<button class="border">
				<i>close</i>
				Cancel
			</button>
		</form>
		<button id={ createTeamSubmitId } form={ createTeamFormId }>
			@view_component.LoadingIcon(createTeamLoadingId, "check", "small")
			Confirm
		</button>
	</nav>
}

templ TeamForm(new bool, dto *TeamFormDTO) {
	<form
		id={ createTeamFormId }
		if new {
			hx-post="/teams"
		} else {
			hx-put={ "/teams/" + ctxvar.GetTeam(ctx).Slug }
		}
		hx-swap="outerHTML"
		hx-indicator={ "#" + createTeamLoadingId }
		hx-disabled-elt={ "#" + createTeamSubmitId }
	>
		<div class={ "field label border", templ.KV("invalid", dto.FieldInvalid("Name")) }>
			<input type="text" name="name" id="create_team_name" required="true" autocomplete="off" value={dto.Name} autofocus />
			<label for="create_team_name" value={ dto.Name }>Name*</label>
			<span class="error">{ dto.FieldError("Name") }</span>
		</div>
		<div class={ "field label border", templ.KV("invalid", dto.FieldInvalid("Organization")) }>
			<input type="text" name="organization" id="create_team_organization" autocomplete="off" value={dto.Organization}/>
			<label for="create_team_organization" value={ dto.Organization }>Organization</label>
			<span class="error">{ dto.FieldError("Organization") }</span>
		</div>
		@view_component.FormError(dto)
	</form>
}
