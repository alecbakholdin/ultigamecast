package view_tournament

import "ultigamecast/internal/models"
import "ultigamecast/web/view/layout"
import "fmt"
import "ultigamecast/web/view/component"
import "ultigamecast/internal/ctxvar"
import "ultigamecast/internal/app/service/tournament_data_types"

templ TournamentPage(t *models.Tournament, data []models.TournamentDatum) {
	@view_layout.Root() {
		<main class="responsive">
			<section>
				<h5 class="bold">{ t.Name }</h5>
				<nav class="vertical tiny-space">
					@TournamentDates(t)
					for _, d := range data {
						if d.ShowInPreview.Int64 > 0 {
							<nav id={ fmt.Sprintf("datum-preview-%d", d.ID) } class="horizontal tiny-space">
								<i>{ d.Icon }</i>
								<span>{ d.TextPreview }</span>
							</nav>
						}
					}
				</nav>
			</section>
			<section class="max">
				<nav id="data-list" class="vertical center">
					if len(data) == 0 {
						if ctxvar.IsAdmin(ctx) {
							<nav class="vertical tiny-space medium middle-align center-align">
								<i class="extra">description</i>
								<h5>You have no data points for this tournament</h5>
								<p>Click the button below to create one</p>
								<div class="space"></div>
								<button
									type="button"
									class="medium"
									hx-post={ ctxvar.Url(ctx, ctxvar.Team, ctxvar.Tournament, "data") }
									hx-target="closest nav"
									hx-swap="outerHTML"
									hx-disabled-elt="this"
									hx-indicator="#create-first-button"
								>
									@view_component.LoadingIcon("create-first-button", "add", "medium")
									Create
								</button>
							</nav>
						} else {
							<div class="medium middle-align center-align">
								<h5>No Additional Information Available</h5>
								<p>Please come back later</p>
							</div>
						}
					}
					for _, d := range data {
						@TournamentDatum(&d)
					}
				</nav>
			</section>
		</main>
	}
}

templ TournamentDatum(td *models.TournamentDatum) {
	if ctxvar.IsAdmin(ctx) {
		@tournamentDataAdmin(&TournamentDataDTO{TournamentDatum: td})
	} else {
		@tournamentDataDisplayOnly(td)
	}
}

type TournamentDataDTO struct {
	view_component.DTO
	*models.TournamentDatum
}

templ tournamentDataAdmin(dto *TournamentDataDTO) {
	<article
		id={ fmt.Sprintf("td-admin-%d", dto.ID) }
		class="center large-width border no-elevate"
		hx-target="this"
		hx-swap="outerHTML"
	>
		<form
			hx-put={ ctxvar.Url(ctx, ctxvar.Team, ctxvar.Tournament, dto.TournamentDatum) }
		>
			<div class={ "field label border", dto.FieldInvalidClass("Title") }>
				<input type="text" name="title" value={ dto.Title } placeholder="Title" autocomplete="off"/>
				<label>Title</label>
				<span class="error">{ dto.FieldError("Title") }</span>
			</div>
			<button type="button">
				<i>{ dto.Icon }</i>
				<span></span>
				<menu class="small-width">
					for _, o := range tournament_data_types.OptionViews {
						<a class="row" hx-on:click="console.log('icon')">
							<i>
								{ o.Icon }
							</i>
							<span>{ o.Title }</span>
						</a>
					}
				</menu>
			</button>
		</form>
	</article>
}

templ tournamentDataDisplayOnly(td *models.TournamentDatum) {
	<div>{ td.Title }</div>
}
