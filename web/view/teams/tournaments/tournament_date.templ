package view_tournament

import "ultigamecast/internal/models"
import "ultigamecast/internal/ctxvar"
import "ultigamecast/web/view/component"
import "fmt"
import "ultigamecast/web/view/component/dto"

type EditTournamentDatesDTO struct {
	dto.DTO
	Dates string
}

templ TournamentDates(t *models.Tournament) {
	if ctxvar.IsAdmin(ctx) {
		<a
			hx-get={ ctxvar.Url(ctx, ctxvar.Team, t, "edit-date") }
			hx-swap="outerHTML"
			hx-target="this"
			class={ "hover-primary row tiny-space", templ.KV("underline", !t.StartDate.Valid || !t.EndDate.Valid) }
		>
			<i>date_range</i>
			<span>
				if t.StartDate.Valid {
					{ t.StartDate.Time.Format("Jan 2") }
				} else {
					?
				}
				-
				if t.EndDate.Valid {
					{ t.EndDate.Time.Format("Jan 2") }
				} else {
					?
				}
			</span>
		</a>
	} else if t.StartDate.Valid || t.EndDate.Valid {
		<div class="row tiny-space">
			<i>date_range</i>
			if t.StartDate.Valid {
				<span>{ t.StartDate.Time.Format("Jan 2") }</span>
			}
			if t.StartDate.Valid && t.EndDate.Valid {
				<span>-</span>
			}
			if t.EndDate.Valid {
				<span>{ t.EndDate.Time.Format("Jan 2") }</span>
			}
		</div>
	}
}

templ EditTournamentDates(dto *EditTournamentDatesDTO) {
	<form
		hx-put={ ctxvar.Url(ctx, ctxvar.Team, ctxvar.Tournament, "edit-date") }
		hx-target="this"
		hx-swap="outerHTML"
		hx-disabled-elt="this button"
		hx-indicator={ "#" + editTournamentDateId(ctx, "submit") }
		hx-on::after-settle={ createDateRangePicker(editTournamentDateId(ctx, "input")) }
	>
		<nav class="horizontal no-space">
			<div class={ "small max field border prefix left-round", dto.FormInvalidClass(), templ.KV("no-margin", dto.Valid()) }>
				<i>date_range</i>
				<input
					id={ editTournamentDateId(ctx, "input") }
					name="dates"
					placeholder="Dates"
					value={ dto.Dates }
				/>
				<span class="error">
					{ dto.FieldError("Name") }
					{ dto.FormError() }
				</span>
			</div>
			<button
				type="button"
				class="border square"
				hx-get={ ctxvar.Url(ctx, ctxvar.Team, ctxvar.Tournament, "date") }
				hx-indicator={ "#" + editTournamentDateId(ctx, "close") }
			>
				@view_component.LoadingIcon(editTournamentDateId(ctx, "close"), "close", "small")
			</button>
			<button class="circle right-round">
				@view_component.LoadingIcon(editTournamentDateId(ctx, "submit"), "check", "small")
			</button>
		</nav>
		<script>
        </script>
	</form>
}

script createDateRangePicker(id string) {
	new easepick.create({
		element: "#" + id,
		css: ["https://cdn.jsdelivr.net/npm/@easepick/bundle@1.2.1/dist/index.css"],
		zIndex: 110,
		format: "MMM D, YYYY",
		plugins: ["RangePlugin"]
	})
}

func editTournamentDateId(ctx context.Context, suffix string) string {
	tournament := ctxvar.GetTournament(ctx)
	return fmt.Sprintf("edit-tournament-date-%d-%s", tournament.ID, suffix)
}
