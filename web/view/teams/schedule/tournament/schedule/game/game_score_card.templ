package view_game

import "ultigamecast/internal/models"
import "ultigamecast/internal/ctxvar"
import "time"
import "fmt"
import "ultigamecast/internal/assert"

templ scoreCard(g *models.Game) {
	<div
		class="max-w-md rounded-md relative mx-auto"
		x-data="{isMobile:(window.innerWidth < 640)}"
		x-on:resize.window="isMobile = (window.innerWidth < 640)"
        :class="isMobile ? '' : 'card'"
	>
		@scoreCardHeader(g)
		@scoreCardContent(g)
		@capProgress(g)
	</div>
}

templ scoreCardHeader(g *models.Game) {
	<header class="card-header level p-2 grid grid-cols-[1fr_2fr_1fr]">
		@ScheduleStatus(g)
		<span class="font-semibold place-self-center text-nowrap text-md">
			{ tourneyString(ctx, g) }
		</span>
		<span class="icon place-self-end text-gray-400">
			<i class="fa-regular fa-bell"></i>
		</span>
	</header>
}

templ scoreCardContent(g *models.Game) {
	<div class="card-content pt-1 pb-6 relative">
		<div class="flex w-full justify-around items-center gap-4 px-1">
			<div class="flex flex-col items-center gap-1">
				<div class="w-16 h-16 sm:w-28 sm:h-28 rounded-full has-background-primary-light"></div>
				<span class="font-bold text-nowrap text-ellipsis text-lg">{ ctxvar.GetTeam(ctx).Name }</span>
			</div>
			<div class="flex flex-col items-center justify-end gap-2">
				<div class="h-fit">
					<div class="w-full grid grid-cols-[1fr_auto_1fr] text-3xl sm:text-4xl font-semibold level">
						<span class="has-text-primary place-self-end">13</span>
						<div class="place-self-center relative"><span class="relative -top-0.5">:</span></div>
						<span class="place-self-start">1</span>
					</div>
				</div>
				<span class="text-gray-400 text-sm">
					Halftime
				</span>
			</div>
			<div class="flex flex-col items-center gap-1">
				<div class="w-16 h-16 sm:w-28 sm:h-28 rounded-full has-background-primary-light"></div>
				<span class="font-bold text-nowrap text-ellipsis text-lg">{ g.Opponent }</span>
			</div>
		</div>
	</div>
}

templ capProgress(g *models.Game) {
	<div class="absolute w-full h-1 bottom-0">
		<div
			class={ "absolute -translate-x-1/2 top-0 -translate-y-full", percentLoad(50, 100) }
		>
			<span class="absolute icon is-small" data-tooltip={ fmt.Sprintf("Half Cap %d min", g.HalfCap.Int64) }>
				<i class="fas fa-circle-half-stroke fa-sm"></i>
			</span>
		</div>
		<div
			class={ "absolute -translate-x-1/2 top-0 -translate-y-full", percentLoad(90, 100) }
		>
			<span class="absolute icon is-small has-tooltip-left" data-tooltip={ fmt.Sprintf("Soft Cap %d min", g.SoftCap.Int64) }>
				<i class="fas fa-circle-notch fa-sm"></i>
			</span>
		</div>
		<div
			class={ "absolute -translate-x-1/2 top-0 -translate-y-full right-0" }
		>
			<span class="absolute icon is-small has-tooltip-left" data-tooltip={ fmt.Sprintf("Hard Cap %d min", g.HardCap.Int64) }>
				<i class="fas fa-circle fa-sm"></i>
			</span>
		</div>
		<div class="h-full w-1/2 has-background-primary"></div>
	</div>
}

css percentLoad(num, den int64) {
	left: { fmt.Sprintf("%.02f%%", 100*float64(num)/float64(den)) };
}

templ ScheduleStatus(g *models.Game) {
	<div class="text-sm">
		switch g.ScheduleStatus {
			case models.GameScheduleStatusScheduled:
				<span class="text-gray-400">
					if g.Start.Valid {
						{ formatTime(g.Start.Time, g.StartTimezone.String, "3:04 PM") }
					} else {
						Scheduled
					}
				</span>
			case models.GameScheduleStatusLive:
				<div class="tag is-danger is-light gap-1">
					<div class="w-2 h-2 rounded-full animate-pulse has-background-danger"></div>
					<span class="has-text-danger">Live</span>
				</div>
			case models.GameScheduleStatusFinal:
				if g.TeamScore > g.OpponentScore {
					<span class="tag is-success is-light has-text-success">
						Win
					</span>
				} else {
					<span class="tag is-danger is-light has-text-danger">
						Loss
					</span>
				}
		}
	</div>
}

func formatTime(t time.Time, timezone, format string) string {
	loc, err := time.LoadLocation(timezone)
	if err != nil {
		return t.Format(format)
	}
	fmt.Println(timezone, loc.String())
	return t.In(loc).Format(format)
}

func tourneyString(ctx context.Context, g *models.Game) string {
	tourney := ctxvar.GetTournament(ctx)
	assert.That(tourney != nil, "tournament is nil")
	str := tourney.Name
	if tourney.StartDate.Valid && g.Start.Valid {
		timeSinceStart := g.Start.Time.AddDate(0, 0, 1).Sub(tourney.StartDate.Time)
		str += fmt.Sprintf(" Day %d", int64(timeSinceStart.Hours())/24)
	}
	return str
}
