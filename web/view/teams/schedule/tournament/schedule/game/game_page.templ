package view_game

import "ultigamecast/internal/models"
import "ultigamecast/web/view/layout"
import "ultigamecast/internal/ctxvar"

templ GamePage(g *models.Game, playerMap map[int64]models.Player, events []models.Event) {
	@view_layout.NavLayout() {
		<section class="section">
			<div class="container max-w-md grid-cols-3 place-items-center">
				<div class="flex flex-col items-center gap-2">
					<div class="w-20 h-20 rounded-full"></div>
					<span class="font-bold">{ ctxvar.GetTeam(ctx).Name }</span>
				</div>
				<div class="flex flex-col items-center gap-2"></div>
				<div class="flex flex-col items-center gap-2">
					<div class="w-20 h-20 rounded-full"></div>
					<span class="font-bold">{ g.Opponent }</span>
				</div>
			</div>
		</section>
	}
}

func getTabs(g *models.Game, playerMap map[int64]models.Player, events []models.Event, isAdmin bool) []view_component.TabInfo {
	tabs := []view_component.TabInfo{
		{Title: "Feed", Icon: "fas fa-stopwatch", Component: EventList(g, events)},
		{Title: "Statistics", Icon: "fas fa-chart-line", UrlSegments: []any{ctxvar.Team, ctxvar.Tournament, ctxvar.Game, "statistics"}},
	}
	if isAdmin && g.ScheduleStatus == models.GameScheduleStatusLive {
		tabs = append([]view_component.TabInfo{
			{Title: "Lines", Icon: "fas fa-user", Component: Lines(g, playerMap, events)},
			{Title: "Point", Icon: "fas fa-compact-disc", Component: GamePoint(g, playerMap)},
		}, tabs...)
	}
	if isAdmin {
		tabs = append(tabs, view_component.TabInfo{
			Title: "Admin", Icon: "fas fa-lock", Component: Admin(g),
		})
	}
	return tabs
}

templ EventList(g *models.Game, events []models.Event) {
	<div class="grid grid-cols-1 gap-4 px-2 text-sm pt-8">
		for _, e := range events {
			@Event(&e)
		}
	</div>
}

templ Event(e *models.Event) {
	if e.Type == models.EventTypeGoal {
		<div class="w-5/6 flex items-start gap-2 place-self-start">
			<span class="w-14 text-gray-400 pt-0.5 flex-shrink-0 text-xs text-right font-semibold">
				{ formatTime(e.Created.Time, ctxvar.GetGame(ctx).StartTimezone.String, "3:04 PM") }
			</span>
			<span class="text-green-700">
				Team { string(e.Type) }
			</span>
		</div>
	} else {
		<div class="w-5/6 flex items-start gap-2 place-self-end flex-row-reverse">
			<span class="w-14 text-gray-400 pt-0.5 flex-shrink-0 text-xs font-semibold">
				{ formatTime(e.Created.Time, ctxvar.GetGame(ctx).StartTimezone.String, "3:04 PM") }
			</span>
			<span class="text-red-700 text-right">
				Opponent { string(e.Type) }
			</span>
		</div>
	}
}
