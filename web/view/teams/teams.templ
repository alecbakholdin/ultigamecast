package view_team

import "ultigamecast/internal/models"
import "ultigamecast/web/view/layout"
import "ultigamecast/web/view/component"
import "fmt"
import "ultigamecast/internal/ctxvar"

templ TeamsPage(teams []models.Team) {
	@view_layout.NavLayout() {
		<main class="responsive surface-container">
			<div class="large-space"></div>
			if len(teams) == 0 {
				<div class="center center-align">
					<p>You currently don't own or follow any teams</p>
					<div class="vertical medium-width center">
						<button
							class="bottom-margin"
							hx-get="/teams-create"
							hx-swap="innerHTML"
							hx-target="#modal"
							hx-indicator="#create-first-team-loading"
						>
							@view_component.LoadingIcon("create-first-team-loading", "add", "small")
							Create your first team
						</button>
						<button type="button">
							<i>person</i>
							Discover teams
						</button>
					</div>
				</div>
			} else {
				@TeamList(teams)
			}
		</main>
	}
}

templ TeamList(teams []models.Team) {
	<div id="team_list" class="horizontal-margin">
		<button
			class="bottom-margin"
			hx-get="/teams-create"
			hx-swap="innerHTML"
			hx-target="#modal"
			hx-indicator="#create-team-loading"
		>
			@view_component.LoadingIcon("create-team-loading", "add", "small")
			New Team
		</button>
		if ownedTeams := getOwnedTeams(ctx, teams); len(ownedTeams) > 0 {
			<div class="vertical-margin">
				<h5>
					Owned
				</h5>
				<div class="small-space"></div>
				<div id="owned_team_list">
					for _, t := range ownedTeams {
						@TeamRow(t)
					}
				</div>
			</div>
		}
		if followedTeams := getFollowedTeams(ctx, teams); len(followedTeams) > 0 {
			<div class="vertical-margin">
				<h5>Followed</h5>
				<div class="small-space"></div>
				<div id="followed_team_list">
					for _, t := range followedTeams {
						@TeamRow(t)
					}
				</div>
			</div>
		}
	</div>
}

func getOwnedTeams(ctx context.Context, teams []models.Team) []*models.Team {
	ownedTeams := make([]*models.Team, 0)
	user := ctxvar.GetUser(ctx)
	for _, t := range teams {
		if t.Owner == user.ID {
			ownedTeams = append(ownedTeams, &t)
		}
	}
	return ownedTeams
}

func getFollowedTeams(ctx context.Context, teams []models.Team) []*models.Team {
	followedTeams := make([]*models.Team, 0)
	user := ctxvar.GetUser(ctx)
	for _, t := range teams {
		if t.Owner != user.ID {
			followedTeams = append(followedTeams, &t)
		}
	}
	return followedTeams
}

templ TeamRow(team *models.Team) {
	<div id={ fmt.Sprintf("team-%d", team.ID) }>
		{ team.Name }
		<a href={ templ.SafeURL("teams/" + team.Slug) }>
			<i>group</i>
		</a>
		<a hx-get={ "teams-edit/" + team.Slug } hx-target="#modal" hx-swap="innerHTML">
			<i>edit</i>
		</a>
	</div>
}
