package view_team

import "ultigamecast/internal/models"
import "ultigamecast/web/view/layout"
import "fmt"
import "ultigamecast/internal/ctxvar"

templ TeamsPage(teams []models.Team) {
	@view_layout.NavLayout() {
		if len(teams) == 0 {
			<section class="section">
				<div class="container has-text-centered">
					<h4 class="is-size-4 block">You do not own or follow any teams</h4>
					<div
						class="block"
					>
						<a
							hx-get="/teams-create"
							hx-indicator="closest div"
							hx-target="#modal-content"
							hx-swap="innerHTML"
							class="button is-primary htmx-loading"
						>
							Create your first team
						</a>
					</div>
				</div>
			</section>
		}
		if owned := getOwnedTeams(ctx, teams); len(owned) > 0 {
			<section class="section">
				<div class="container">
					for _, t := range owned {
						@TeamRow(&t)
					}
					<div class="buttons">
						<a
							class="button is-primary htmx-loading"
							hx-get="/teams-create"
							hx-target="#modal-content"
							hx-swap="innerHTMl"
							hx-indicator="closest div"
						>
							Create a team
						</a>
					</div>
				</div>
			</section>
		}
	}
}

templ TeamList(teams []models.Team) {
	<div class="team-list"></div>
}

templ TeamRow(team *models.Team) {
	<div id={ fmt.Sprintf("team-%d", team.ID) } class="box has-background-primary-90 is-shadowless is-hoverable">
		<div class="level">
			<div>
				<h5 class="is-size-5">
					{ team.Name }
				</h5>
				if team.Organization.Valid {
					<p class="is-size-6 has-text-gray-light">
						{ team.Organization.String }
					</p>
				}
			</div>
			<div class="buttons">
				<a href={ ctxvar.SafeUrl(ctx, team) }>
					<span class="icon is-large"><i class="fa-solid fa-arrow-up-right-from-square fa-lg"></i></span>
				</a>
			</div>
		</div>
	</div>
}

func getOwnedTeams(ctx context.Context, teams []models.Team) []models.Team {
	ownedTeams := make([]models.Team, 0)
	user := ctxvar.GetUser(ctx)
	for _, t := range teams {
		if t.Owner == user.ID {
			ownedTeams = append(ownedTeams, t)
		}
	}
	return ownedTeams
}

func getFollowedTeams(ctx context.Context, teams []models.Team) []models.Team {
	followedTeams := make([]models.Team, 0)
	user := ctxvar.GetUser(ctx)
	for _, t := range teams {
		if t.Owner != user.ID {
			followedTeams = append(followedTeams, t)
		}
	}
	return followedTeams
}
